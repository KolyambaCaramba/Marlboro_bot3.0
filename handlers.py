import logging
import sqlite3
from aiogram import types
from aiogram.dispatcher.filters.command import Command
from aiogram.utils.callback_data import CallbackData

lastm_callback_data = CallbackData("lastm", "play_date")
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [types.KeyboardButton(text="üèÜ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ üèÜ", callback_data="lastm"),
        types.KeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ üèÉ‚Äç‚ôÇÔ∏è", callback_data="players")],
        [types.KeyboardButton(text="üíµ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥—ã üíµ", callback_data="results")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é"
    )
    await message.answer("‚öΩ –î–æ–±—Ä—ã–π –¥–µ–Ω—å, –≤—ã –ø–æ–ø–∞–ª–∏ –≤ Marlboro Bot! ‚öΩ\n‚öΩ –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é ‚öΩ", reply_markup=keyboard)


@dp.message(Command("lastm"))
async def cmd_results(message: types.Message):
    conn = sqlite3.connect('mbr1.db')
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT scored, missed, opponent, play_date FROM matches")
        results_list = cursor.fetchall()

        if not results_list:
            await message.answer("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_list_text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(
            f"Marlboro  ( {scored}:{missed} )  {opponent}  -  {play_date}" for scored, missed, opponent, play_date in
            results_list
        )

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        buttons = []
        for scored, missed, opponent, play_date in results_list:
            buttons.append(types.InlineKeyboardButton(text=f"({scored}:{missed}) - {opponent}",
                                                      callback_data=f"lastm_{play_date}"))

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        columns = 2
        inline_keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[buttons[i:i + columns] for i in range(0, len(buttons), columns)])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á:\n\n" + results_list_text, reply_markup=inline_keyboard)
    finally:
        conn.close()

@dp.message(Command("players"))
async def players_handler(message: types.Message):
    conn = sqlite3.connect('mbr1.db')
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT last_name FROM players")
        player_list = cursor.fetchall()

        if not player_list:
            await message.answer("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.")
            return

        buttons = []
        for last_name in player_list:
            buttons.append(types.InlineKeyboardButton(text=last_name, callback_data=f"player_{last_name}"))

        columns = 2
        inline_keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[buttons[i:i + columns] for i in range(0, len(buttons), columns)])

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞:", reply_markup=inline_keyboard)
    finally:
        cursor.close()
        conn.close()

@dp.callback_query_handler(lambda call: call.data.startswith('player_'))
async def player_callback_handler(call: types.CallbackQuery):
    last_name = call.data.split('_')[1]
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä–æ–∫–∞ {last_name}.")

@dp.message(Command("results"))
async def results_handler(msg: types.Message):
    conn = sqlite3.connect('mbr1.db')
    cursor = conn.cursor()

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã matches
        cursor.execute("SELECT count(*) FROM matches")
        matches_played = cursor.fetchone()[0]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–±–∏—Ç—ã—Ö –≥–æ–ª–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã goal_details
        cursor.execute("SELECT count(*) FROM goal_details WHERE who_score != 0")
        goal_scored = cursor.fetchone()[0]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞—Å—Å–∏—Å—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã goal_details
        cursor.execute("SELECT count(*) FROM goal_details WHERE who_assist != 0")
        goal_assists = cursor.fetchone()[0]

        # –¢–∞–∫ –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        cursor.execute("SELECT count(match_id) from matches where scored > missed;")
        match_won = cursor.fetchone()[0]

        # –¢–∞–∫ –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        cursor.execute("SELECT avg(scored) from matches")
        scored_avg = cursor.fetchone()[0]
        scored_avg = round(scored_avg, 2)

        # –¢–∞–∫ –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        cursor.execute("SELECT avg(missed) from matches")
        missed_avg = cursor.fetchone()[0]
        missed_avg = round(missed_avg, 2)

        cursor.execute(
            'SELECT  who_assist, count(*) FROM goal_details GROUP BY who_assist ORDER BY count(*) DESC limit 3')
        res1 = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥—ã
        message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –§–ö üö¨Marlboroüö¨:\n\n"
        message += f"–ß–∏—Å–ª–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π - {matches_played}\n"
        message += f"–ó–∞–±–∏—Ç–æ –≥–æ–ª–æ–≤ - {goal_scored}\n"
        message += f"–ß–∏—Å–ª–æ –∞—Å—Å–∏—Å—Ç–æ–≤ - {goal_assists}\n"
        message += f"–ú–∞—Ç—á–µ–π –≤—ã–∏–≥—Ä–∞–Ω–æ - {match_won}\n"
        message += f"–ó–∞–±–∏—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –∏–≥—Ä—É - {scored_avg}\n"
        message += f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –∏–≥—Ä—É - {missed_avg}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
        await msg.answer(message)

    finally:
        cursor.close()
        conn.close()